#!/usr/bin/env python
#
# Cloudlet Infrastructure for Mobile Computing
#
#   Author: Kiryong Ha <krha@cmu.edu>
#           Zhuo Chen <zhuoc@cs.cmu.edu>
#
#   Copyright (C) 2011-2013 Carnegie Mellon University
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

import json
import multiprocessing
import os
import pprint
import Queue
import struct
import sys
import time

dir_file = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.join(dir_file, "../.."))
import gabriel
import gabriel.proxy
LOG = gabriel.logging.getLogger(__name__)


class DummyVideoApp(gabriel.proxy.CognitiveProcessThread):
    def handle(self, header, data):
        # PERFORM Cognitive Assistance Processing
        header['status'] = "success"
        LOG.info("processing: ")
        LOG.info("%s\n" % header)
        return json.dumps({'value':'nothing'})


#class DummyAccApp(AppProxyThread):
#    def chunks(self, l, n):
#        for i in xrange(0, len(l), n):
#            yield l[i:i + n]
#
#    def handle(self, header, acc_data):
#        ACC_SEGMENT_SIZE = 16# (int, float, float, float)
#        for chunk in self.chunks(acc_data, ACC_SEGMENT_SIZE):
#            (acc_time, acc_x, acc_y, acc_z) = struct.unpack("!ifff", chunk)
#            print "time: %d, acc_x: %f, acc_y: %f, acc_x: %f" % \
#                    (acc_time, acc_x, acc_y, acc_z)
#        return None


if __name__ == "__main__":
    settings = gabriel.util.process_command_line(sys.argv[1:])

    ip_addr, port = gabriel.network.get_registry_server_address(settings.address)
    service_list = gabriel.network.get_service_list(ip_addr, port)
    LOG.info("Gabriel Server :")
    LOG.info(pprint.pformat(service_list))

    video_ip = service_list.get(gabriel.ServiceMeta.VIDEO_TCP_STREAMING_IP)
    video_port = service_list.get(gabriel.ServiceMeta.VIDEO_TCP_STREAMING_PORT)
    #acc_ip = service_list.get(gabriel.ServiceMeta.ACC_TCP_STREAMING_IP)
    #acc_port = service_list.get(gabriel.ServiceMeta.ACC_TCP_STREAMING_PORT)
    ucomm_ip = service_list.get(gabriel.ServiceMeta.UCOMM_SERVER_IP)
    ucomm_port = service_list.get(gabriel.ServiceMeta.UCOMM_SERVER_PORT)

    # image receiving thread
    image_queue = Queue.Queue(gabriel.Const.APP_LEVEL_TOKEN_SIZE)
    print "TOKEN SIZE OF OFFLOADING ENGINE: %d" % gabriel.Const.APP_LEVEL_TOKEN_SIZE
    video_streaming = gabriel.proxy.SensorReceiveClient((video_ip, video_port), image_queue)
    video_streaming.start()
    video_streaming.isDaemon = True

    # dummy video app
    result_queue = multiprocessing.Queue()

    video_app = DummyVideoApp(image_queue, result_queue, engine_id = "Dummy")
    video_app.start()
    video_app.isDaemon = True

    # dummy acc app
    #acc_client = None
    #acc_app = None
    #acc_queue = Queue.Queue(1)
    #acc_client = AppProxyStreamingClient((acc_ip, acc_port), acc_queue)
    #acc_client.start()
    #acc_client.isDaemon = True
    #acc_app = DummyAccApp(acc_queue, result_queue)
    #acc_app.start()
    #acc_app.isDaemon = True

    # result pub/sub
    result_pub = gabriel.proxy.ResultPublishClient((ucomm_ip, ucomm_port), result_queue)
    result_pub.start()
    result_pub.isDaemon = True

    try:
        while True:
            time.sleep(1)
    except Exception as e:
        pass
    except KeyboardInterrupt as e:
        LOG.info("user exits\n")
    finally:
        if video_streaming is not None:
            video_streaming.terminate()
        if video_app is not None:
            video_app.terminate()
        #if acc_client is not None:
        #    acc_client.terminate()
        #if acc_app is not None:
        #    acc_app.terminate()
        result_pub.terminate()
